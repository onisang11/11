G = nx.DiGraph()
G.add_node('A', demand = -2)
G.add_node('B', demand = 0)
G.add_node('C', demand = 0)
G.add_node('D', demand = 0)
G.add_node('E', demand = 0)
G.add_node('F', demand = 0)
G.add_node('G', demand = 2)
G.add_edge('B', 'A', weight = 1, capacity = 5, multiplier = 1.0)
G.add_edge('A', 'C', weight = 2, capacity = 4, multiplier = 1.0)
G.add_edge('B', 'C', weight = 2, capacity = 5, multiplier = 0.75)
G.add_edge('D', 'B', weight = 3, capacity = 4, multiplier = 1.0)
G.add_edge('E', 'B', weight = 4, capacity = 4, multiplier = 1.5)
G.add_edge('E', 'D', weight = 3, capacity = 4, multiplier = 1.0)
G.add_edge('E', 'F', weight = 4, capacity = 4, multiplier = 1.5)
G.add_edge('C', 'E', weight = 1, capacity = 4, multiplier = 0.9)
G.add_edge('D', 'F', weight = 3, capacity = 5, multiplier = 0.8)
G.add_edge('E', 'G', weight = 1, capacity = 4, multiplier = 1.0)
G.add_edge('G', 'C', weight = 2, capacity = 4, multiplier = 1.0)
flowCost, H = nx.network_simplex_generalized(G)
soln = {'A': {'C': 2.8571428571428568}, 'B': {'A': 0.8571428571428568, 'C': 0.0}, 'C': {'E': 2.8571428571428568}, 'D': {'B': 0.0, 'F': 0.0}, 'E': {'B': 0.5714285714285712, 'D': 0.0, 'F': 0.0, 'G': 2.0}, 'F': {}, 'G': {'C': 0.0}}
assert_equal(flowCost, 13.714285714285712)
assert_equal(H, soln)